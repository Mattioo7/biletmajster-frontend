/* tslint:disable */
/* eslint-disable */
/**
 * System rezerwacji miejsc na eventy
 * Niniejsza dokumentacja stanowi opis REST API implemtowanego przez serwer centralny. Endpointy 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: XXX@pw.edu.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200 } from '../models';
import { Organizer } from '../models';
/**
 * EventOrganizerApi - axios parameter creator
 * @export
 */
export const EventOrganizerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {string} code code from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirm: async (id: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling confirm.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling confirm.');
            }
            const localVarPath = `/organizer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOrganizer.');
            }
            const localVarPath = `/organizer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("sessionToken")
                    : await configuration.apiKey;
                localVarHeaderParameter["sessionToken"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs organizer into the system
         * @param {string} email The organizer email for login
         * @param {string} password the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOrganizer: async (email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling loginOrganizer.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginOrganizer.');
            }
            const localVarPath = `/organizer/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch orginizer account
         * @param {string} id id of Organizer
         * @param {Organizer} [body] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrganizer: async (id: string, body?: Organizer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchOrganizer.');
            }
            const localVarPath = `/organizer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("sessionToken")
                    : await configuration.apiKey;
                localVarHeaderParameter["sessionToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create orginizer account
         * @param {string} name name of Organizer
         * @param {string} email email of Organizer
         * @param {string} password password of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (name: string, email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling signUp.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling signUp.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling signUp.');
            }
            const localVarPath = `/organizer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventOrganizerApi - functional programming interface
 * @export
 */
export const EventOrganizerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {string} code code from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirm(id: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Organizer>>> {
            const localVarAxiosArgs = await EventOrganizerApiAxiosParamCreator(configuration).confirm(id, code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await EventOrganizerApiAxiosParamCreator(configuration).deleteOrganizer(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Logs organizer into the system
         * @param {string} email The organizer email for login
         * @param {string} password the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOrganizer(email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await EventOrganizerApiAxiosParamCreator(configuration).loginOrganizer(email, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Patch orginizer account
         * @param {string} id id of Organizer
         * @param {Organizer} [body] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrganizer(id: string, body?: Organizer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await EventOrganizerApiAxiosParamCreator(configuration).patchOrganizer(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create orginizer account
         * @param {string} name name of Organizer
         * @param {string} email email of Organizer
         * @param {string} password password of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(name: string, email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Organizer>>> {
            const localVarAxiosArgs = await EventOrganizerApiAxiosParamCreator(configuration).signUp(name, email, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventOrganizerApi - factory interface
 * @export
 */
export const EventOrganizerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {string} code code from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirm(id: string, code: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Organizer>> {
            return EventOrganizerApiFp(configuration).confirm(id, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizer(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return EventOrganizerApiFp(configuration).deleteOrganizer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logs organizer into the system
         * @param {string} email The organizer email for login
         * @param {string} password the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOrganizer(email: string, password: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return EventOrganizerApiFp(configuration).loginOrganizer(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch orginizer account
         * @param {string} id id of Organizer
         * @param {Organizer} [body] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrganizer(id: string, body?: Organizer, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return EventOrganizerApiFp(configuration).patchOrganizer(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create orginizer account
         * @param {string} name name of Organizer
         * @param {string} email email of Organizer
         * @param {string} password password of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(name: string, email: string, password: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Organizer>> {
            return EventOrganizerApiFp(configuration).signUp(name, email, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventOrganizerApi - object-oriented interface
 * @export
 * @class EventOrganizerApi
 * @extends {BaseAPI}
 */
export class EventOrganizerApi extends BaseAPI {
    /**
     * 
     * @summary Confirm orginizer account
     * @param {string} id id of Organizer
     * @param {string} code code from email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public async confirm(id: string, code: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Organizer>> {
        return EventOrganizerApiFp(this.configuration).confirm(id, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Confirm orginizer account
     * @param {string} id id of Organizer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public async deleteOrganizer(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return EventOrganizerApiFp(this.configuration).deleteOrganizer(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Logs organizer into the system
     * @param {string} email The organizer email for login
     * @param {string} password the password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public async loginOrganizer(email: string, password: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return EventOrganizerApiFp(this.configuration).loginOrganizer(email, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Patch orginizer account
     * @param {string} id id of Organizer
     * @param {Organizer} [body] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public async patchOrganizer(id: string, body?: Organizer, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return EventOrganizerApiFp(this.configuration).patchOrganizer(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create orginizer account
     * @param {string} name name of Organizer
     * @param {string} email email of Organizer
     * @param {string} password password of Organizer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public async signUp(name: string, email: string, password: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Organizer>> {
        return EventOrganizerApiFp(this.configuration).signUp(name, email, password, options).then((request) => request(this.axios, this.basePath));
    }
}
