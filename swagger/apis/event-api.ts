/* tslint:disable */
/* eslint-disable */
/**
 * System rezerwacji miejsc na eventy
 * Niniejsza dokumentacja stanowi opis REST API implemtowanego przez serwer centralny. Endpointy 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: XXX@pw.edu.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Event } from '../models';
/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new event
         * @param {string} title title of Event
         * @param {string} name title of Event
         * @param {number} freePlace No of free places
         * @param {number} startTime Unix time stamp of begin of event
         * @param {number} endTime Unix time stamp of end of event
         * @param {Array<number>} categories Unix time stamp of end of event
         * @param {string} [placeSchema] seralized place schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent: async (title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            if (title === null || title === undefined) {
                throw new RequiredError('title','Required parameter title was null or undefined when calling addEvent.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling addEvent.');
            }
            // verify required parameter 'freePlace' is not null or undefined
            if (freePlace === null || freePlace === undefined) {
                throw new RequiredError('freePlace','Required parameter freePlace was null or undefined when calling addEvent.');
            }
            // verify required parameter 'startTime' is not null or undefined
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling addEvent.');
            }
            // verify required parameter 'endTime' is not null or undefined
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling addEvent.');
            }
            // verify required parameter 'categories' is not null or undefined
            if (categories === null || categories === undefined) {
                throw new RequiredError('categories','Required parameter categories was null or undefined when calling addEvent.');
            }
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("sessionToken")
                    : await configuration.apiKey;
                localVarHeaderParameter["sessionToken"] = localVarApiKeyValue;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (freePlace !== undefined) {
                localVarQueryParameter['freePlace'] = freePlace;
            }

            if (placeSchema !== undefined) {
                localVarQueryParameter['placeSchema'] = placeSchema;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel event
         * @param {string} id id of Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelEvent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling cancelEvent.');
            }
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("sessionToken")
                    : await configuration.apiKey;
                localVarHeaderParameter["sessionToken"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return list of all events in category
         * @param {number} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCategory: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling getByCategory.');
            }
            const localVarPath = `/events/getByCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single event
         * @summary Find event by ID
         * @param {number} id ID of event to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getEventById.');
            }
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return list of all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return list of events made by organizer, according to session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyEvents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("sessionToken")
                    : await configuration.apiKey;
                localVarHeaderParameter["sessionToken"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary patch existing event
         * @param {string} id id of Event
         * @param {Event} [body] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEvent: async (id: string, body?: Event, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchEvent.');
            }
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("sessionToken")
                    : await configuration.apiKey;
                localVarHeaderParameter["sessionToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new event
         * @param {string} title title of Event
         * @param {string} name title of Event
         * @param {number} freePlace No of free places
         * @param {number} startTime Unix time stamp of begin of event
         * @param {number} endTime Unix time stamp of end of event
         * @param {Array<number>} categories Unix time stamp of end of event
         * @param {string} [placeSchema] seralized place schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEvent(title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Event>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).addEvent(title, name, freePlace, startTime, endTime, categories, placeSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Cancel event
         * @param {string} id id of Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelEvent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).cancelEvent(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return list of all events in category
         * @param {number} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCategory(categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).getByCategory(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single event
         * @summary Find event by ID
         * @param {number} id ID of event to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Event>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).getEventById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return list of all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).getEvents(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return list of events made by organizer, according to session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyEvents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).getMyEvents(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary patch existing event
         * @param {string} id id of Event
         * @param {Event} [body] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEvent(id: string, body?: Event, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).patchEvent(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add new event
         * @param {string} title title of Event
         * @param {string} name title of Event
         * @param {number} freePlace No of free places
         * @param {number} startTime Unix time stamp of begin of event
         * @param {number} endTime Unix time stamp of end of event
         * @param {Array<number>} categories Unix time stamp of end of event
         * @param {string} [placeSchema] seralized place schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEvent(title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Event>> {
            return EventApiFp(configuration).addEvent(title, name, freePlace, startTime, endTime, categories, placeSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel event
         * @param {string} id id of Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelEvent(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return EventApiFp(configuration).cancelEvent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return list of all events in category
         * @param {number} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCategory(categoryId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return EventApiFp(configuration).getByCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single event
         * @summary Find event by ID
         * @param {number} id ID of event to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Event>> {
            return EventApiFp(configuration).getEventById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return list of all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return EventApiFp(configuration).getEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return list of events made by organizer, according to session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyEvents(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return EventApiFp(configuration).getMyEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary patch existing event
         * @param {string} id id of Event
         * @param {Event} [body] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEvent(id: string, body?: Event, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return EventApiFp(configuration).patchEvent(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     * 
     * @summary Add new event
     * @param {string} title title of Event
     * @param {string} name title of Event
     * @param {number} freePlace No of free places
     * @param {number} startTime Unix time stamp of begin of event
     * @param {number} endTime Unix time stamp of end of event
     * @param {Array<number>} categories Unix time stamp of end of event
     * @param {string} [placeSchema] seralized place schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public async addEvent(title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Event>> {
        return EventApiFp(this.configuration).addEvent(title, name, freePlace, startTime, endTime, categories, placeSchema, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Cancel event
     * @param {string} id id of Event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public async cancelEvent(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return EventApiFp(this.configuration).cancelEvent(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Return list of all events in category
     * @param {number} categoryId ID of category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public async getByCategory(categoryId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return EventApiFp(this.configuration).getByCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a single event
     * @summary Find event by ID
     * @param {number} id ID of event to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public async getEventById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Event>> {
        return EventApiFp(this.configuration).getEventById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Return list of all events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public async getEvents(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return EventApiFp(this.configuration).getEvents(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Return list of events made by organizer, according to session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public async getMyEvents(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return EventApiFp(this.configuration).getMyEvents(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary patch existing event
     * @param {string} id id of Event
     * @param {Event} [body] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public async patchEvent(id: string, body?: Event, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return EventApiFp(this.configuration).patchEvent(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
